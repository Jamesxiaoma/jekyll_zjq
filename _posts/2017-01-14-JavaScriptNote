JavaScript学习笔记.md


#廖雪峰官方网站- JavaScript教程
[TOC]

#1、快速入门
##简介
1995
##1、基本语法于数据结构
启用strict模式的方法是在JavaScript代码的第一行写上：'use strict';

###数组
数组长度，arr.length
请注意，直接给Array的length赋一个新的值会导致Array大小的变化.
相关函数：indexOf/slice/push/pop/unshift/shift/sort/reverse
**splice()**
方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素;
concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array;请注意，concat()方法并没有修改当前Array，而是返回了一个新的Array。
join()
方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串.
eg: alert('欢迎'+arr.sort().splice(0,arr.length-1).join(',')+'和'+arr[arr.length-1])+'同学';

###对象
JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。

###条件判断
<pre>
'use strict';
var height = parseFloat(prompt('请输入身高(m):'));
var weight = parseFloat(prompt('请输入体重(kg):'));
var bmi = weight/(height*height);
if (bmi<18.5){
  alert('过轻');
}else if(bmi <25){
  alert('正常');
}else if(bmi<28){
  alert('过重');
}
else if(bmi<32){
  alert('肥胖');
}else{
  alert('严重肥胖');
}
</pre>

###循环
for (i=1; i<=10000; i++) {}

for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来。
请注意，for ... in对Array的循环得到的是String而不是Number。

###Map和Set
JavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对。
但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。
为了解决这个问题，最新的ES6规范引入了新的数据类型Map。

###iterable
迭代方式
for ... in循环将把name包括在内，但Array的length属性却不包括在内。
for ... of循环则完全修复了这些问题，它只循环集合本身的元素。
然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例：

    var a = ['A', 'B', 'C'];
    a.forEach(function (element, index, array) {
    // element: 指向当前元素的值
    // index: 指向当前索引
    // array: 指向Array对象本身
    alert(element);
    });

如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得Array的element：

var a = ['A', 'B', 'C'];
a.forEach(function (element) {
    alert(element);
});

##**venus 递归中 for in 改写成a.forEach(function(e){})**
注意，forEach()方法是ES5.1标准引入的，你需要测试浏览器是否支持。


##2、函数
###简单定义
基本上所有的高级语言都支持函数，JavaScript也不例外。JavaScript的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。

借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。
写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。
    在JavaScript中，定义函数的方式如下：
<pre>
function abs(x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
}
</pre>
第二种定义函数的方式如下：
<pre>
    var abs = function (x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
};
</pre>
arguments

JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array.
<pre>
if (arguments.length ===1){
    return 3.14*r*r;
}else if(arguments.length ===2){
    return pi*r*r;
}else{
    return 0;
}  

function area_of_circle(r, pi) {
   return (typeof arguments[1]) === 'undefined' ? r*r*3.14 : r*r*pi;
}
</pre>

rest参数是ES6新标准.

###变量作用域
把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。
许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。

局部作用域:为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量.
常量：ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：


###方法
在一个对象中绑定函数，称为这个对象的方法。
在一个方法内部，this是一个特殊变量，它始终指向当前对象。

##apply：##
<pre>
function getAge() {
    var y = new Date().getFullYear();
    return y - this.birth;
}
var xiaoming = {
    name: '小明',
    birth: 1990,
    age: getAge
};
xiaoming.age(); // 25
getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空
</pre>
另一个与apply()类似的方法是call()，唯一区别是：
apply()把参数打包成Array再传入；
call()把参数按顺序传入。
比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下：
Math.max.apply(null, [3, 5, 4]); // 5
Math.max.call(null, 3, 5, 4); // 5
对普通函数调用，我们通常把this绑定为null。

##装饰器##

#利用apply()，我们还可以动态改变函数的行为。#
JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。
现在假定我们想统计一下代码一共调用了多少次parseInt()，可以把所有的调用都找出来，然后手动加上count += 1，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的parseInt()：
<pre>
var count = 0;
var oldParseInt = parseInt; // 保存原函数

window.parseInt = function () {
    count += 1;
    return oldParseInt.apply(null, arguments); // 调用原函数
};

// 测试:
parseInt('10');
parseInt('20');
parseInt('30');
count; // 3
</pre>

###高阶函数
高阶函数英文叫Higher-order function。那么什么是高阶函数？
JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。

一个最简单的高阶函数：
function add(x, y, f) {
    return f(x) + f(y);
}
####map/redux


####filter
####sort


###闭包


###箭头函数


###generator



##3、标准对象
Data
RegExp
JSON


##4、面向对象编程

##5、浏览器
###浏览器对象

###canvas
Canvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等。
画布


#2、jQuery
##选择器是jQuery的核心。$('dom-id')
按照id查找：
//查找<div id="abc">
var div = $('#abc')
如果id为abc的<div>存在，返回的jQuery对象如下：[<div id="abc">...</div>]
按照tag查找：var ps = $('p');
按照class查找：var a = $('.red');
按照属性查找：
var email = $('[name=email]'); // 找出<??? name="email">
var passwordInput = $('[type=password]'); // 找出<??? type="password">
var a = $('[items="A B"]'); // 找出<??? items="A B">
var icons = $('[name^=icon]'); // 找出所有name属性值以icon开头的DOM
// 例如: name="icon-1", name="icon-2"
var names = $('[name$=with]'); // 找出所有name属性值以with结尾的DOM
// 例如: name="startswith", name="endswith"
var icons = $('[class^="icon-"]'); // 找出所有class包含至少一个以`icon-`开头的DOM
// 例如: class="icon-clock", class="abc icon-home"
组合查找:
var emailInput = $('input[name=email]'); // 不会找出<div name="email">
var tr = $('tr.red'); // 找出<tr class="red ...">...</tr>
多项选择器
$('p,div'); // 把<p>和<div>都选出来
$('p.red,p.green'); // 把<p class="red">和<p class="green">都选出来

作业
//selected = $('#para-1');
//selected = $('.color-red.color-green');
//selected = $('.color-red');
//selected = $('.color-red,.color-green,.color-black');
//selected = $('input[name="name"]');
selected = $('input[name=name],[name=email]');

###层级选择器（Descendant Selector）
如果两个DOM元素具有层级关系，就可以用$('ancestor descendant')来选择，层级之间用空格隔开。
$('ul.lang li.lang-javascript'); // [<li class="lang-javascript">JavaScript</li>]
###子选择器（Child Selector）
子选择器$('parent>child')类似层级选择器，但是限定了层级关系必须是父子关系，就是<child>节点必须是<parent>节点的直属子节点。
$('ul.lang>li.lang-javascript'); // 可以选出[<li class="lang-javascript">JavaScript</li>]
###过滤器（Filter）
过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。观察过滤器的效果：
$('ul.lang li'); // 选出JavaScript、Python和Lua 3个节点

$('ul.lang li:first-child'); // 仅选出JavaScript
$('ul.lang li:last-child'); // 仅选出Lua
$('ul.lang li:nth-child(2)'); // 选出第N个元素，N从1开始
$('ul.lang li:nth-child(even)'); // 选出序号为偶数的元素
$('ul.lang li:nth-child(odd)'); // 选出序号为奇数的元素

查找和过滤
find() filter()

##操作Dom

##事件

##动画

#3、underscore

#4、Node.js
安装

##Web开发

$5、React


自动化工具
